CREATE SEQUENCE reflexpr.seq_unique_id;

--
-- concept
--

CREATE TABLE reflexpr.concept (
	concept_id INTEGER NOT NULL DEFAULT nextval('reflexpr.seq_unique_id'),
	concept_name reflexpr.identifier NOT NULL,
	is_metaobject BOOLEAN NOT NULL DEFAULT TRUE,
	is_value BOOLEAN NOT NULL DEFAULT FALSE,
	is_type BOOLEAN NOT NULL DEFAULT FALSE
);

ALTER TABLE reflexpr.concept
ADD UNIQUE(concept_id);

ALTER TABLE reflexpr.concept
ADD PRIMARY KEY(concept_name);


--
-- concept_element
--
CREATE TABLE reflexpr.concept_element (
	container reflexpr.identifier NOT NULL,
	element reflexpr.identifier NOT NULL
);

ALTER TABLE reflexpr.concept_element
ADD PRIMARY KEY(container, element);

ALTER TABLE reflexpr.concept_element
ADD FOREIGN KEY(container) REFERENCES reflexpr.concept;

ALTER TABLE reflexpr.concept_element
ADD FOREIGN KEY(element) REFERENCES reflexpr.concept;


--
-- concept_inheritance
--
CREATE TABLE reflexpr.concept_inheritance (
	generalization reflexpr.identifier NOT NULL,
	specialization reflexpr.identifier NOT NULL
);

ALTER TABLE reflexpr.concept_inheritance
ADD PRIMARY KEY(generalization, specialization);

ALTER TABLE reflexpr.concept_inheritance
ADD FOREIGN KEY(generalization) REFERENCES reflexpr.concept;

ALTER TABLE reflexpr.concept_inheritance
ADD FOREIGN KEY(specialization) REFERENCES reflexpr.concept;

--
-- indirect_concept_inheritance
--
CREATE TABLE reflexpr.indirect_concept_inheritance (
	generalization reflexpr.identifier NOT NULL,
	specialization reflexpr.identifier NOT NULL,
	level_offset SMALLINT NOT NULL
);

ALTER TABLE reflexpr.indirect_concept_inheritance
ADD PRIMARY KEY(generalization, specialization, level_offset);

ALTER TABLE reflexpr.indirect_concept_inheritance
ADD FOREIGN KEY(generalization) REFERENCES reflexpr.concept;

ALTER TABLE reflexpr.indirect_concept_inheritance
ADD FOREIGN KEY(specialization) REFERENCES reflexpr.concept;

CREATE FUNCTION reflexpr.update_indirect_concept_inheritance ()
RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO reflexpr.indirect_concept_inheritance
	SELECT generalization, NEW.specialization, level_offset + 1
	FROM reflexpr.indirect_concept_inheritance
	WHERE specialization = NEW.generalization
	ON CONFLICT (generalization, specialization, level_offset)
	DO NOTHING;

	INSERT INTO reflexpr.indirect_concept_inheritance
	SELECT NEW.generalization, specialization, level_offset + 1
	FROM reflexpr.indirect_concept_inheritance
	WHERE generalization = NEW.specialization
	ON CONFLICT (generalization, specialization, level_offset)
	DO NOTHING;

	INSERT INTO reflexpr.indirect_concept_inheritance
	(generalization, specialization, level_offset)
	VALUES(NEW.generalization, NEW.specialization, 1);

	RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_indirect_concept_inheritance_update
AFTER INSERT ON reflexpr.concept_inheritance
FOR EACH ROW EXECUTE PROCEDURE reflexpr.update_indirect_concept_inheritance();

--
-- concept_id_inheritance
--
CREATE VIEW reflexpr.concept_id_inheritance AS
SELECT
	gen.concept_id AS generalization_id,
	inh.generalization,
	spc.concept_id AS specialization_id,
	inh.specialization
FROM reflexpr.concept_inheritance inh
JOIN reflexpr.concept gen ON(inh.generalization = gen.concept_name)
JOIN reflexpr.concept spc ON(inh.specialization = spc.concept_name);

--
-- concept_hierarchy
--
CREATE VIEW reflexpr.concept_hierarchy AS
SELECT
	concept_id AS generalization_id,
	concept_name AS generalization,
	concept_id AS specialization_id,
	concept_name AS specialization,
	0 AS min_level_offset,
	0 AS max_level_offset
FROM reflexpr.concept
UNION
SELECT
	gen.concept_id AS generalization_id,
	inh.generalization,
	spc.concept_id AS specialization_id,
	inh.specialization,
	min(level_offset),
	max(level_offset)
FROM reflexpr.indirect_concept_inheritance inh
JOIN reflexpr.concept gen ON(inh.generalization = gen.concept_name)
JOIN reflexpr.concept spc ON(inh.specialization = spc.concept_name)
GROUP BY (gen.concept_id, generalization, spc.concept_id, specialization);


--
-- operation
--
CREATE TABLE reflexpr.operation (
	result reflexpr.identifier NOT NULL,
	operation_id INTEGER NOT NULL DEFAULT nextval('reflexpr.seq_unique_id'),
	operation_name reflexpr.identifier NOT NULL,
	operation_overload reflexpr.identifier NOT NULL
);

ALTER TABLE reflexpr.operation
ADD PRIMARY KEY(operation_name, operation_overload);

ALTER TABLE reflexpr.operation
ADD UNIQUE(operation_id);

ALTER TABLE reflexpr.operation
ADD FOREIGN KEY(result) REFERENCES reflexpr.concept;


--
-- operation_parameter
--
CREATE TABLE reflexpr.operation_parameter (
	operation_name reflexpr.identifier NOT NULL,
	operation_overload reflexpr.identifier NOT NULL,
	parameter reflexpr.identifier NOT NULL,
	position SMALLINT NOT NULL DEFAULT 0
);

ALTER TABLE reflexpr.operation_parameter
ADD PRIMARY KEY(operation_name, operation_overload, position);

ALTER TABLE reflexpr.operation_parameter
ADD FOREIGN KEY(operation_name, operation_overload) REFERENCES reflexpr.operation;

ALTER TABLE reflexpr.operation_parameter
ADD FOREIGN KEY(parameter) REFERENCES reflexpr.concept;

--
-- simple_operation_parameter
--
CREATE VIEW reflexpr.simple_operation_parameter AS
SELECT operation_name, parameter
FROM reflexpr.operation_parameter;

CREATE FUNCTION reflexpr.insert_simple_operation_parameter () RETURNS TRIGGER
AS $$
BEGIN
INSERT INTO reflexpr.operation_parameter
(operation_name, operation_overload, parameter, position)
VALUES(NEW.operation_name, NEW.parameter, NEW.parameter, 0);

RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_simple_operation_parameter_insert
INSTEAD OF INSERT ON reflexpr.simple_operation_parameter
FOR EACH ROW
EXECUTE PROCEDURE reflexpr.insert_simple_operation_parameter ();

--
-- derived_operation_parameter
--
CREATE VIEW reflexpr.derived_operation_parameter AS
SELECT
	operation_id,
	operation_name,
	operation_overload,
	specialization_id AS parameter_id,
	specialization AS parameter,
	position
FROM reflexpr.operation_parameter opa
JOIN reflexpr.operation op
USING(operation_name, operation_overload)
JOIN reflexpr.concept_hierarchy ch
ON(opa.parameter = ch.generalization);

--
-- derived_operation_result
--
CREATE VIEW reflexpr.derived_operation_result AS
SELECT
	specialization_id AS result_id,
	specialization AS result,
	operation_id,
	operation_name,
	operation_overload
FROM reflexpr.operation op
JOIN reflexpr.concept_hierarchy ch
ON(op.result = ch.generalization);

--
-- operand
--
CREATE TABLE reflexpr.operand (
	operand reflexpr.specification NOT NULL
);

ALTER TABLE reflexpr.operand
ADD PRIMARY KEY(operand);

--
-- reflection
--
CREATE TABLE reflexpr.reflection (
	operand reflexpr.specification NOT NULL,
	result reflexpr.identifier NOT NULL
);

ALTER TABLE reflexpr.reflection
ADD PRIMARY KEY(operand, result);

ALTER TABLE reflexpr.reflection
ADD FOREIGN KEY(operand) REFERENCES reflexpr.operand;

ALTER TABLE reflexpr.reflection
ADD FOREIGN KEY(result) REFERENCES reflexpr.concept;

